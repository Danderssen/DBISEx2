CREATE TABLE SHOP (
	SHOPID INT NOT NULL,
	SHOPNAME VARCHAR(100),
	CITYNAME VARCHAR(50),
	REGIONNAME VARCHAR(50),
	COUNTRYNAME VARCHAR(50),
	PRIMARY KEY (SHOPID)
);

CREATE TABLE ARTICLE (
	ArticleID INT NOT NULL,
	ArticleName VARCHAR(100),
	ProductGroupName VARCHAR(50),
	ProductFamilyName VARCHAR(50),
	ProductCategoryName VARCHAR(50),
	PRIMARY KEY (ArticleID)
);

CREATE TABLE SALE_DATE (
	DATEID INT NOT NULL,
	DAY INT,
	MONTH INT,
	QUARTER INT,
	YEAR INT,
	PRIMARY KEY (DATEID)
);

CREATE TABLE SALE (
	DATEID INT NOT NULL, -- renamed because 'date' is reserved
	SHOPID INT NOT NULL,
	ARTICLEID INT NOT NULL,
	SALES INT,
	REVENUE REAL,
	PRIMARY KEY (DATEID, SHOPID, ARTICLEID), -- try it like this ;)
	FOREIGN KEY (DATEID) REFERENCES SALE_DATE (DATEID),
	FOREIGN KEY (SHOPID) REFERENCES SHOP (SHOPID),
	FOREIGN KEY (ARTICLEID) REFERENCES ARTICLE (ARTICLEID)
);

SELECT SUM(sa.SALES), SUM(sa.REVENUE), d.DATEID
FROM SALE sa
  INNER JOIN SHOP sh ON sa.SHOPID = sh.SHOPID
  INNER JOIN ARTICLE a ON sa.ARTICLEID = a.ARTICLEID
  INNER JOIN SALE_DATE d ON sa.DATEID = d.DATEID
WHERE 1 = 1 -- TODO
GROUP BY d.DATEID;



MERGE INTO SALE_DATE d (DATEID, DAY, MONTH, QUARTER, YEAR) 
USING (VALUES (13, 1,1,1,1)) AS m (DATEID, DAY, MONTH, QUARTER, YEAR)
ON d.DATEID = m.DATEID
WHEN NOT MATCHED THEN
        INSERT (DATEID, DAY, MONTH, QUARTER, YEAR)
        VALUES (m.DATEID, m.DAY, m.MONTH, m.QUARTER, m.YEAR)
ELSE IGNORE


